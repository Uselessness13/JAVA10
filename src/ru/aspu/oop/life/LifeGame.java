package ru.aspu.oop.life;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

// ?????, ??????????? ??????? ???? "?????"
public class LifeGame {

	private List<Integer> bs = new ArrayList<>();
	private List<Integer> ss = new ArrayList<>();
	// ?????
	private Grid grid;

	// ????? ??? ????????? ?????
	private GridView gridView;

	// ??????? ????? ????????? ???? ? ???????? ?????? ? ????? ???????????
	public LifeGame(Grid grid, GridView gridView, String rules) {
		super();
		String b = rules.split("/")[0].substring(1);
		String s = rules.split("/")[1].substring(1);
		for (int i = 0; i<b.length();i++){
			bs.add(Integer.parseInt(String.valueOf(b.charAt(i))));
		}
		for (int i = 0; i<s.length();i++){
			ss.add(Integer.parseInt(String.valueOf(s.charAt(i))));
		}
		this.grid = grid;
		this.gridView = gridView;
		// ????????? ??????? ?????????? ??????
		populate();
	}

	// ????????? ???? ??? ????
	public void step() {
		updateGrid();
		gridView.updateView();
	}

	// ????????? ???????? ?????????? ????? ????
	public void multipleSteps(int n) {
		try {
			for (int i = 0; i < n; i++) {
				step();
				Thread.sleep(20);
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	// ????????? ?????????? ????? ? ?????? ?????? ????
	private void updateGrid() {
		int width = grid.getWidth();
		int height = grid.getHeight();
		// ??? ??????????? ????????? ? ????? ????????? ?????
		Grid tempGrid = new Grid(width, height);
		// ?????????? ?????? ?????? ?????
		for (int i = 0; i < width; i++)
			for (int j = 0; j < height; j++) {
				// ???????? ??????? ?????? ? ?????? LifeCell
				LifeCell currentCell = (LifeCell) grid.getCellAt(i, j);
				// ???????? ?????? ???????? ? ??????? ?????
				List<Cell> neighbours = grid.get8Neighbours(i, j);
				// ??????? ?????????? ????? ???????
				int aliveNeighbours = countAliveCells(neighbours);
				// ??????? ????? ?????? ??? ????? ???????
				LifeCell newCell = new LifeCell(currentCell.isAlive());
				// ???????? ????????? ????????? ?????? ? ???????????? ?
				// ?????????
				if (currentCell.isAlive()) {
					if (bs.contains(aliveNeighbours))
						newCell.setAlive(false);
				}
				if ((!currentCell.isAlive()) && (ss.contains(aliveNeighbours)))
					newCell.setAlive(true);
				// ???????? ????? ?????? ? ????? ?????
				tempGrid.setCellAt(i, j, newCell);
			}
		// ????????? ??? ?????? ?? ????????? ????? ? ???????
		for (int i = 0; i < width; i++)
			for (int j = 0; j < height; j++)
				grid.setCellAt(i, j, tempGrid.getCellAt(i, j));
	}

	// ???????????? "?????" ?????? ? ???????? ?????? ?????
	private int countAliveCells(List<Cell> cells) {
		int aliveNeighbours = 0;
		// ?????????? ??? ?????? ? ??????
		for (Cell c : cells)
			// ?????????, ??? ?????? ?????????? ? ???????? ??????? ???? "?????"
			if ((c != null) && (c instanceof LifeCell)) {
				// ???????? ?????? ? ?????? LifeCell
				LifeCell lcell = (LifeCell) c;
				if (lcell.isAlive())
					aliveNeighbours++;
			}
		return aliveNeighbours;
	}

	// ???????? ????? ???????? ????????? ???????
	public void populate() {
		int width = grid.getWidth();
		int height = grid.getHeight();
		Random rnd = new Random();
		for (int i = 0; i < width; i++)
			for (int j = 0; j < height; j++) {
				grid.setCellAt(i, j, new LifeCell(rnd.nextBoolean()));
			}

	}

}
